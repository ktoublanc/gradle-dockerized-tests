group 'fr.ktc'
version '1.0.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'


import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
}

// Build script definition
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.1'
        classpath 'org.easytesting:fest-assert-core:2.0M10'
    }
}

// Dependencies (not needed here but declared to help writing test)
dependencies {
    compile group: 'info.cukes', name: 'cucumber-java8', version: '1.2.4'
    compile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.4'
}

// Docker definition
docker {
    // For MAC OS X
    url = 'https://192.168.99.100:2376'
    certPath = new File(System.getProperty("user.home")+ "/.docker/machine/machines/default")
}

// TomEE Pull Image
task pullTomEEImage(type: DockerPullImage) {
    repository =  "tomee"
    tag = "7-jre-1.7.2-plus"
}

// TomEE Create Container
task createTomEEContainer(type: DockerCreateContainer) {
    dependsOn pullTomEEImage
    imageId = "${pullTomEEImage.repository}:${pullTomEEImage.tag}"
    containerName = "tomee"
}

// Remove TomEE Container
task removeTomEEContainer(type: DockerRemoveContainer) {
    dependsOn createTomEEContainer
    targetContainerId { createTomEEContainer.getContainerId() }
    // finalizedBy removeTomEEImage
}

// TomEE start container
task startTomEEContainer(type: DockerStartContainer) {
    dependsOn createTomEEContainer
    targetContainerId { createTomEEContainer.getContainerId() }
}

// Stop TomEE container
task stopTomEEContainer(type: DockerStopContainer) {
    dependsOn startTomEEContainer
    targetContainerId { createTomEEContainer.getContainerId() }
    finalizedBy removeTomEEContainer
}

// Copy src into build directory
task copySources(type: Copy) {
    from "${projectDir}/src/main/"
    into "${buildDir}/dockerized-tests/src/main"
}
task copyTestSources(type: Copy) {
    from "${projectDir}/src/test/"
    into "${buildDir}/dockerized-tests/src/test"
}

// Create gradle docker file
task createGradleDockerfile(type: Dockerfile) {
    dependsOn copySources, copyTestSources
    destFile = project.file('build/dockerized-tests/Dockerfile')
    from 'niaquinto/gradle:latest'
    maintainer 'KÃ©vin Toublanc "ktc@yopmail.com"'

    addFile("src/main" , "/usr/bin/app/src/main")
    addFile("src/test" , "/usr/bin/app/src/test")
    addFile("src/main/gradle/build.gradle", "/usr/bin/app/build.gradle")
    addFile("src/main/gradle/entrypoint.sh", "/usr/src/entrypoint.sh")

    defaultCommand("clean", "build")
    entryPoint("/usr/src/entrypoint.sh")
}

// Remove gradle dokcer image
task removeGradleImage(type: DockerRemoveImage) {
    imageId = project.getName() + ":" + project.getVersion()
}

// Build gradle docker image from dockerfile
task buildGradleImage(type: DockerBuildImage) {
    dependsOn createGradleDockerfile
    inputDir = createGradleDockerfile.destFile.parentFile
    imageId = "gradle-dockerized-tests"
    tag = project.getName() + ":" + project.getVersion()
}

// Create gradle container
task createGradleContainer(type: DockerCreateContainer) {
    dependsOn buildGradleImage
    imageId = buildGradleImage.tag
    attachStderr = true
    attachStdout = true
    def localPath = project.file('build/dockerized-tests/build').path;
    binds = new HashMap<>()
    binds.put(localPath, "/usr/bin/app/build")
}

// Remove gradle container
task removeGradleContainer(type: DockerRemoveContainer) {
    dependsOn createGradleContainer
    targetContainerId { createGradleContainer.getContainerId() }
    finalizedBy removeGradleImage
}

// Start container
task startGradleContainer(type: DockerStartContainer) {
    dependsOn createGradleContainer
    targetContainerId { createGradleContainer.getContainerId() }
}

// Wait for test to finish
task waitGradleContainer(type: DockerWaitContainer) {
    dependsOn startGradleContainer
    targetContainerId { createGradleContainer.getContainerId() }
}

// Launch tests into a gradle dokcer container and wait for them to finish
task runDockerizedTests(type:Test) {
    dependsOn waitGradleContainer
    binResultsDir = file('build/dockerized-tests/build/test-results')
    finalizedBy removeGradleContainer
}

// Test definition
test {
    dependsOn runDockerizedTests

    // All tests are excluded as that will be ran in docker
    exclude '**'
}
