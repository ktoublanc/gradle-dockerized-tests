group 'fr.ktc'
version '1.0.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*;

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.1'
    }
}

dependencies {
    compile group: 'info.cukes', name: 'cucumber-java8', version: '1.2.4'
    compile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.4'
}

test {
    exclude '**'
}

docker {
    // For MAC OS X
    url = 'https://192.168.99.100:2376'
    certPath = new File(System.getProperty("user.home")+ "/.docker/machine/machines/default")
}


// Deploy tomee
task pullTomEEImage(type: DockerPullImage) {
    repository = "tomee"
    tag = "7-jre-1.7.2-plus"
}

task createTomEEContainer(type: DockerCreateContainer) {
    //dependsOn pullTomEEImage
    imageId = "tomee:7-jre-1.7.2-plus"
    attachStderr = true
    attachStdout = true
}

task stopTomEEContainer(type: DockerStopContainer) {
    mustRunAfter check
    targetContainerId { createTomEEContainer.getContainerId() }
}

task removeTomEEContainer(type: DockerRemoveContainer) {
    mustRunAfter check
    dependsOn stopTomEEContainer
    targetContainerId { createTomEEContainer.getContainerId() }
}

task startTomEEContainer(type: DockerStartContainer) {
    dependsOn createTomEEContainer
    targetContainerId { createTomEEContainer.getContainerId() }
    finalizedBy removeTomEEContainer
}


task pullGraddleBaseImage(type: DockerPullImage) {
    repository = "niaquinto/gradle"
    tag = "latest"
}

task copySources(type: Copy) {
    from "${projectDir}/src/main/"
    into "${buildDir}/Docker/Gradle/src/main"
}

task copyTestSources(type: Copy) {
    from "${projectDir}/src/test/"
    into "${buildDir}/Docker/Gradle/src/test"
}

task createDockerfile(type: Dockerfile) {
    dependsOn copySources, copyTestSources
    destFile = project.file('build/Docker/Gradle/Dockerfile')
    from 'niaquinto/gradle:latest'
    maintainer 'KÃ©vin Toublanc "ktc@yopmail.com"'

    addFile("src/main" , "/usr/bin/app/src/main")
    addFile("src/test" , "/usr/bin/app/src/test")
    addFile("src/main/gradle/build.gradle", "/usr/bin/app/build.gradle")
    addFile("src/main/gradle/entrypoint.sh", "/usr/src/entrypoint.sh")

    defaultCommand("clean", "build")
    entryPoint("/usr/src/entrypoint.sh")
}

task removeGradleImage(type: DockerRemoveImage) {
    mustRunAfter check
    imageId = project.getName() + ":" + project.getVersion()
}

task buildGradleImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    imageId = "gradle-dockerized-tests"
    tag = project.getName() + ":" + project.getVersion()
    //finalizedBy removeGradleImage
}

task createGradleContainer(type: DockerCreateContainer) {
    dependsOn startTomEEContainer, buildGradleImage

    println("Start --> " + startTomEEContainer.getContainerId())
    println("Create --> " + createTomEEContainer.getContainerId())
    println("Final -->" + createTomEEContainer.getContainerId()+ ":tomee")

    imageId = buildGradleImage.tag
    attachStderr = true
    attachStdout = true

    links = Arrays.asList((String) createTomEEContainer.getContainerId() + ":tomee")
}

task removeGradleContainer(type: DockerRemoveContainer) {
    dependsOn createGradleContainer
    targetContainerId { createGradleContainer.getContainerId() }
    mustRunAfter test
}

task startGradleContainer(type: DockerStartContainer) {
    dependsOn createGradleContainer
    targetContainerId { createGradleContainer.getContainerId() }
    finalizedBy removeGradleContainer
}


// Tests are depending on StartGradleContainer task
test.dependsOn(startGradleContainer)

task waitGradleContainer(type: DockerWaitContainer) {
    targetContainerId { createGradleContainer.getContainerId() }
}
test.dependsOn(waitGradleContainer)